

    Git
        소스 코드 버전 관리 시스템


        프로젝트 개발
        v0.1 --- 서비스 중
        v0.2 --- 여러 기능 추가
             --- feature 1 --- 개발완료
                 feature 2 --- 개발완료 -- 되돌려야함
                 feature 3 --- 개발 --- 에러

        =>
            v0.1 (product)
            v0.2 (dev) --- 기능마다 버전 나눌수도 있음

            프로젝트 개발의 history 역할
            
            git - 소스 코드 버전관리를 넘어 협업 시스템

        ex) 
            v0.2 --- feature 1 (성용)
                 --- feature 2 (동민)
                 --- feature 3 (진용) --- (동시에 작업이 일어남)

            ----------------------------------------------------

            conflict (충돌상황)

                저장공간에 각 기능을 합병(merge)할때 
                충돌이 난 부분을 확인하여 충돌상황을 해결(resolve)후
                merge할 수 있도록 함

            ---------------------------------------------------- ===> 병렬적 개발 가능

            이슈 트래커

                개발 간에 있었던 이슈(오류 해결, 오류 미해결)을 기록
            
            ----------------------------------------------------

            CI/CD를 위한 저장소

                지속적인 통합, 지속적인 배포

            ----------------------------------------------------

            Git 다운로드

            ----------------------------------------------------
              
                Git을 웹호스팅 (UI가 있도록) 서비스
                세계 최대 개발자 커뮤니티

                회원가입 -> 프로필 -> 내 개인 저장소 -> new repository

            ----------------------------------------------------

            앞으로 해야할 일

                1. 내가 버전 관리하고 싶은 프로젝트(폴더)를 찾습니다.
                2. 해당 폴더에 로컬 저장소(.git)를 생성 (init)
                3. 이 로컬 저장소와 내가 생성한 repository(원격 저장소)의 주소를 연동 (remote)
                
                -- 최초 1회만 하면됨 --

                4. 내가 로컬 저장소에 올리고 싶은 파일을 스테이징[준비] (add)
                5. 내 로컬 저장소 환경에 파일을 전송 (commit)
                
                -----commit에 이상이 없다면 다음 단계--------
                
                5.5 push에 조건이 있다.
                    현재 올리려는 저장소와 최신화 -> 원격저장소에서 -> 내 로컬 환경 (pull)
                
                6.  원격 저장소로 전송 (push)

                -- 4~6까지 과정 계속 해야함 --
            
                  ----------------------------------------------------

                git init
                - 로컬 저장소 생성 (.git) -> 나는 앞으로 이 프로젝트를 버전 관리할거야

                git remote
                - 원격 저장소 설정

                    1) git remote
                        현재 해당 로컬 저장소와 연결된 원격 저장소의 목록
                    
                    2) git remote add [원격저장소] [원격 저장소주소]
                        ex) git remote add origin http:/github.com/abcd/abcd
                        원격 저장소와 로컬 저장소를 연결

                    3) git remote remove [원격저장소] [원격 저장소주소]
                        연결된 원격 저장소를 삭제

                git add .
                    모든 파일을 스테이징
                    (.gitignore 에 올라가있는 파일은 스테이징 하지 않음)

                    git add 파일명
                        내가 올리고 싶은 파일만 스테이징
                        ex) git add index.html

                git commit  
                    로컬 저장소에 내가 올리고싶은 파일을 올리는 것
                    commit을 하게되면 일종의 해쉬(암호화)된 코드를 받게 됨

                    향후 이 코드를 사용하여
                    cherry pick 하거나 revert 할 수 있다.

                    => git cherry-pick hash_commit_number
                        
                         ex) 
                         A라는 기능을 위해
                         10개의 커밋이 존재

                         해당 commit 중 내가 적용하고 싶은 커밋만 적용하고자 할 때
                         해당 commit만 선택하여 적용할 수 있는 명령어     

                    => git revert hash_commit_number    
                        해당 commit으로 되돌리기 기능
                        사용하지 않는 것을 추천**************************** -> 사용시 커밋 내용이 꼬임
                        (ex) 마지막 commit undo)

                    => git log
                        현재 git의 history와 git hash_commit_number 확인 가능

                    --amend <- revert를 사용하기보다 차라리 amend 사용하거나 GUI로 하길 추천
                    기존에 있던 git commit 내용과 현재 commit 내용을 합침


                    ex) 
                    git commit -m "title" -m "body" -m "footer"
                    git commit -m 'feat: login api' -m '로그인 api를 추가하였습니다.'

                        -m: 메세지라는 뜻


                    => git cherry-pick hash_commit_number
                        
                         ex) 
                         A라는 기능을 위해
                         10개의 커밋이 존재

                         해당 commit 중 내가 적용하고 싶은 커밋만 적용하고자 할 때
                         해당 commit만 선택하여 적용할 수 있는 명령어     

                    => git revert hash_commit_number    
                        해당 commit으로 되돌리기 기능
                        사용하지 않는 것을 추천**************************** -> 사용시 커밋 내용이 꼬임
                        (ex) 마지막 commit undo)

                    => git log
                        현재 git의 history와 git hash_commit_number 확인 가능

                git push 원격저장소명 브랜치명

                    ex) git push origin main
                    로컬 저장소의 커밋 내용을 원격 저장소에 전송

                git pull 원격저장소명 브랜치명

                    ex) git pull origin main
                    원격 저장소의 내용과 현재 내 로컬 환경을 동기화

                  ----------------------------------------------------여기까지는 나 혼자만의 작업

                github 계정을 내 컴퓨터 자체에 연결

                    git config --global user.name "zivivle"
                    git config --global user.email "zivivle@gmail.com"

                    git config --list (q를 통해 나갈 수 있음)


                  -----------------------------------------------------


            * Github Flow

                


            * Trunk Based






